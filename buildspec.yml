version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12   # Change to the Python version your project needs
    commands:
      - echo "Installing python dependencies for order service ..."
      - pip install --upgrade pip
      - pip install -r tests/requirements.txt

  pre_build:
    commands:
      - echo "Running the prebuild commands for order service ........."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Account ID = $ACCOUNT_ID"
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Region= $AWS_REGION"

  build:
    commands:
      - echo "Running the tests for order service .................."

  post_build:
    commands:
      - echo "Build completed ...................."
      - echo "Starting Lambda function deployment .................."
      - mkdir -p lambda-deployment
      - |
        for func_dir in functions/*/; do
          if [ -d "$func_dir" ]; then
            # Extract function name from directory path
            func_name=$(basename "$func_dir")
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@  Processing function: $func_name"            
            # Create a temporary directory for this function
            temp_dir="lambda-deployment/$func_name"
            mkdir -p "$temp_dir"
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@ Created temporary directory: $temp_dir"
            # Copy function files to temp directory
            cp -r "$func_dir"* "$temp_dir/"            
            # Install dependencies in the temp directory
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@  Installing dependencies for $func_name..."
            pip install -r "$temp_dir/requirements.txt" -t "$temp_dir/"
            
            # Create zip file
            zip_file="lambda-deployment/${func_name}.zip"
            zip_file_abs="$(pwd)/lambda-deployment/${func_name}.zip"
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@  Creating zip file: $zip_file_abs"
            (cd "$temp_dir" && zip -r "$zip_file_abs" .)
            
            # Verify zip file was created
            if [ ! -f "$zip_file_abs" ]; then
              echo "ERROR: Zip file not created at $zip_file_abs"
              exit 1
            fi
            
            # Get absolute path for zip file
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@  Zip file absolute path: $zip_file_abs"
            ls -lh "$zip_file_abs"
            
            # Convert function name to handler format (replace _ with -)
            handler_name=$(echo "$func_name" | tr '_' '-')
            
            # Deploy Lambda function
            echo "Deploying Lambda function: $func_name"
            
            # Check if function exists - use exit code
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Checking if function $func_name exists..."
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Executing: aws lambda get-function --function-name \"$func_name\" --region \"$AWS_REGION\""
            set +e  # Don't exit on error
            aws lambda get-function --function-name "$func_name" --region "$AWS_REGION"
            FUNCTION_CHECK_EXIT_CODE=$?
            set -e  # Re-enable exit on error
            
            if [ $FUNCTION_CHECK_EXIT_CODE -eq 0 ]; then
              FUNCTION_EXISTS=true
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name exists (exit code: $FUNCTION_CHECK_EXIT_CODE)"
            else
              FUNCTION_EXISTS=false
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name does not exist (exit code: $FUNCTION_CHECK_EXIT_CODE)"
            fi
            
            # Update or create function based on existence check
            if [ "$FUNCTION_EXISTS" = true ]; then
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name exists, updating function code..."
              aws lambda update-function-code \
                --function-name "$func_name" \
                --zip-file "fileb://${zip_file_abs}" \
                --region "$AWS_REGION"
              
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for function update to complete..."
              aws lambda wait function-updated \
                --function-name "$func_name" \
                --region "$AWS_REGION"
            else
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name does not exist, creating new function..."
              aws lambda create-function \
                --function-name "$func_name" \
                --runtime python3.12 \
                --role "arn:aws:iam::${ACCOUNT_ID}:role/before-after-allow-traffic-role" \
                --handler "${handler_name}.handler" \
                --zip-file "fileb://${zip_file_abs}" \
                --timeout 120 \
                --memory-size 256 \
                --region "$AWS_REGION" \
                --environment Variables="{TABLE_NAME=Orders,DEPLOYED_AWS_REGION=$AWS_REGION}" \
                --description "Order service Lambda function for $func_name"
              
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for function creation to complete..."
              aws lambda wait function-active \
                --function-name "$func_name" \
                --region "$AWS_REGION"
            fi
            
            # Version management logic
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Managing versions for $func_name..."
            
            # Get the latest version number
            LATEST_VERSION=$(aws lambda list-versions-by-function \
              --function-name "$func_name" \
              --region "$AWS_REGION" \
              --query 'Versions[?Version!=`$LATEST`].Version | max(@)' \
              --output text)
            
            if [ "$LATEST_VERSION" = "None" ] || [ -z "$LATEST_VERSION" ]; then
              NEW_VERSION=1
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  No versions found, setting version to 1"
            else
              NEW_VERSION=$((LATEST_VERSION + 1))
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Latest version is $LATEST_VERSION, incrementing to $NEW_VERSION"
            fi
            
            # Publish new version
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Publishing version $NEW_VERSION for $func_name..."
            PUBLISHED_VERSION=$(aws lambda publish-version \
              --function-name "$func_name" \
              --description "Version $NEW_VERSION of $func_name - Deployed via CodeBuild" \
              --region "$AWS_REGION" \
              --query 'Version' \
              --output text)
            
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Successfully published version $PUBLISHED_VERSION for $func_name"
            
            # Create alias if it doesn't exist
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Checking if 'latest' alias exists..."
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Executing: aws lambda get-alias --function-name \"$func_name\" --name latest --region \"$AWS_REGION\""
            set +e  # Don't exit on error
            aws lambda get-alias --function-name "$func_name" --name latest --region "$AWS_REGION"
            ALIAS_CHECK_EXIT_CODE=$?
            set -e  # Re-enable exit on error

            if [ $ALIAS_CHECK_EXIT_CODE -ne 0 ]; then
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Alias 'latest' does not exist (exit code: $ALIAS_CHECK_EXIT_CODE), creating..."
              aws lambda create-alias \
                --function-name "$func_name" \
                --name latest \
                --function-version "$PUBLISHED_VERSION" \
                --region "$AWS_REGION"
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Created alias 'latest' pointing to version $PUBLISHED_VERSION"
            else
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Alias 'latest' already exists (exit code: $ALIAS_CHECK_EXIT_CODE), skipping creation..."
            fi
            
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Version management completed for $func_name"
            echo "@@@@@@@@@@@@@@@@@@@@@@@@   Completed deployment for $func_name"
            
            # Update appspec.yml only if NEW_VERSION is greater than 1
            if [ "$NEW_VERSION" -gt 1 ]; then
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  NEW_VERSION ($NEW_VERSION) is greater than 1, updating appspec.yml..."
              
              # Read the appspec.yml file
              APPSPEC_FILE="appspec.yml"
              APPSPEC_OUTPUT_FILE="appspec_${func_name}.yml"
              
              if [ -f "$APPSPEC_FILE" ]; then
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Found appspec.yml, creating $APPSPEC_OUTPUT_FILE for $func_name..."
                
                # Copy appspec.yml to function-specific file
                cp "$APPSPEC_FILE" "$APPSPEC_OUTPUT_FILE"
                
                # Calculate the previous version (CURRENT_VERSION)
                CURRENT_VERSION=$((PUBLISHED_VERSION - 1))
                
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Function: $func_name"
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Current Version: $CURRENT_VERSION"
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Published Version (Target): $PUBLISHED_VERSION"
                
                # Update the function-specific appspec file with actual values
                sed -i "s/<LAMBDA_FUNCTION_NAME>/$func_name/g" "$APPSPEC_OUTPUT_FILE"
                sed -i "s/<CURRENT_VERSION>/$CURRENT_VERSION/g" "$APPSPEC_OUTPUT_FILE"
                sed -i "s/<PUBLISHED_VERSION>/$PUBLISHED_VERSION/g" "$APPSPEC_OUTPUT_FILE"
                
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Updated $APPSPEC_OUTPUT_FILE successfully"
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Contents of $APPSPEC_OUTPUT_FILE:"
                cat "$APPSPEC_OUTPUT_FILE"
              else
                echo "@@@@@@@@@@@@@@@@@@@@@@@@@  WARNING: appspec.yml not found in current directory"
              fi
            else
              echo "@@@@@@@@@@@@@@@@@@@@@@@@@  NEW_VERSION ($NEW_VERSION) is 1, skipping appspec.yml update for initial deployment"
            fi
            
            echo "----------------------------------------"
          fi
        done
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@@@ Lambda function deployment completed .................."
artifacts:
  files:
    - "appspec_fetch_order.yml"
    - "appspec_save_order.yml"
