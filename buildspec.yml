version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.12   # Change to the Python version your project needs
    commands:
      - echo "Installing python dependencies for order service ..."
      - pip install --upgrade pip
      - pip install -r tests/requirements.txt

  pre_build:
    commands:
      - echo "Running the prebuild commands for order service ........."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Account ID = $ACCOUNT_ID"
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Region= $AWS_REGION"

  build:
    commands:
      - echo "Running the tests for order service .................."

  post_build:
    commands:
      - echo "Build completed ...................."
      - echo "Starting Lambda function deployment .................."
      - mkdir -p lambda-deployment
      - |
        # Copy the template appspec.yml to a working copy
        cp appspec.yml appspec_working.yml
        
        for func_dir in functions/*/; do
          if [ -d "$func_dir" ]; then
            # Extract function name from directory path
            func_name=$(basename "$func_dir")
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@  Processing function: $func_name"            
            # Create a temporary directory for this function
            temp_dir="lambda-deployment/$func_name"
            mkdir -p "$temp_dir"
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@ Created temporary directory: $temp_dir"
            # Copy function files to temp directory
            cp -r "$func_dir"* "$temp_dir/"            
            # Install dependencies in the temp directory
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Installing dependencies for $func_name..."
            pip install -r "$temp_dir/requirements.txt" -t "$temp_dir/"
            
            # Create zip file
            zip_file="lambda-deployment/${func_name}.zip"
            zip_file_abs="$(pwd)/lambda-deployment/${func_name}.zip"
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Creating zip file: $zip_file_abs"
            (cd "$temp_dir" && zip -r "$zip_file_abs" .)
            
            # Verify zip file was created
            if [ ! -f "$zip_file_abs" ]; then
              echo "ERROR: Zip file not created at $zip_file_abs"
              exit 1
            fi
            
            # Get absolute path for zip file
            echo "@@@@@@@@@@@@@@@@@@@@@@@@@  Zip file absolute path: $zip_file_abs"
            ls -lh "$zip_file_abs"
            
            # Convert function name to handler format (replace _ with -)
            handler_name=$(echo "$func_name" | tr '_' '-')
            
            # Deploy Lambda function
            echo "Deploying Lambda function: $func_name"
            
            # Check if function exists - use exit code
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Checking if function $func_name exists..."
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Executing: aws lambda get-function --function-name \"$func_name\" --region \"$AWS_REGION\""
            set +e  # Don't exit on error
            aws lambda get-function --function-name "$func_name" --region "$AWS_REGION"
            FUNCTION_CHECK_EXIT_CODE=$?
            set -e  # Re-enable exit on error
            
            if [ $FUNCTION_CHECK_EXIT_CODE -eq 0 ]; then
              FUNCTION_EXISTS=true
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name exists (exit code: $FUNCTION_CHECK_EXIT_CODE)"
            else
              FUNCTION_EXISTS=false
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name does not exist (exit code: $FUNCTION_CHECK_EXIT_CODE)"
            fi
            
            # Update or create function based on existence check
            if [ "$FUNCTION_EXISTS" = true ]; then
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name exists, updating function code..."
              aws lambda update-function-code \
                --function-name "$func_name" \
                --zip-file "fileb://${zip_file_abs}" \
                --region "$AWS_REGION"
              
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for function update to complete..."
              aws lambda wait function-updated \
                --function-name "$func_name" \
                --region "$AWS_REGION"
            else
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Function $func_name does not exist, creating new function..."
              aws lambda create-function \
                --function-name "$func_name" \
                --runtime python3.12 \
                --role "arn:aws:iam::${ACCOUNT_ID}:role/before-after-allow-traffic-role" \
                --handler "${handler_name}.handler" \
                --zip-file "fileb://${zip_file_abs}" \
                --timeout 120 \
                --memory-size 256 \
                --region "$AWS_REGION" \
                --environment Variables="{TABLE_NAME=Orders,DEPLOYED_AWS_REGION=$AWS_REGION}" \
                --description "Order service Lambda function for $func_name"
              
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for function creation to complete..."
              aws lambda wait function-active \
                --function-name "$func_name" \
                --region "$AWS_REGION"
            fi
            
            # Version management logic
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Managing versions for $func_name..."
            
            # Get the latest version number
            LATEST_VERSION=$(aws lambda list-versions-by-function \
              --function-name "$func_name" \
              --region "$AWS_REGION" \
              --query 'Versions[?Version!=`$LATEST`].Version | max(@)' \
              --output text)
            
            if [ "$LATEST_VERSION" = "None" ] || [ -z "$LATEST_VERSION" ]; then
              NEW_VERSION=1
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  No versions found, setting version to 1"
            else
              NEW_VERSION=$((LATEST_VERSION + 1))
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Latest version is $LATEST_VERSION, incrementing to $NEW_VERSION"
            fi
            
            # Publish new version
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Publishing version $NEW_VERSION for $func_name... "
            PUBLISHED_VERSION=$(aws lambda publish-version \
              --function-name "$func_name" \
              --description "Version $NEW_VERSION of $func_name - Deployed via CodeBuild" \
              --region "$AWS_REGION" \
              --query 'Version' \
              --output text)
            
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Successfully published version $PUBLISHED_VERSION for $func_name"
            
            # Wait for the version to be fully created and active
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for version $PUBLISHED_VERSION to be active..."
            aws lambda wait function-active-v2 \
              --function-name "$func_name:$PUBLISHED_VERSION" \
              --region "$AWS_REGION" 2>/dev/null || \
            aws lambda wait function-active \
              --function-name "$func_name" \
              --region "$AWS_REGION"
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Version $PUBLISHED_VERSION is now active"
            
            # Create alias if it doesn't exist
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Checking if 'latest' alias exists..."
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Executing: aws lambda get-alias --function-name \"$func_name\" --name latest --region \"$AWS_REGION\""
            set +e  # Don't exit on error
            aws lambda get-alias --function-name "$func_name" --name latest --region "$AWS_REGION"
            ALIAS_CHECK_EXIT_CODE=$?
            set -e  # Re-enable exit on error

            if [ $ALIAS_CHECK_EXIT_CODE -ne 0 ]; then
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Alias 'latest' does not exist (exit code: $ALIAS_CHECK_EXIT_CODE), creating..."
              aws lambda create-alias \
                --function-name "$func_name" \
                --name latest \
                --function-version "$PUBLISHED_VERSION" \
                --region "$AWS_REGION"
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Created alias 'latest' pointing to version $PUBLISHED_VERSION"
              
              # Wait for alias to be fully created by verifying it exists
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for alias 'latest' to be fully created..."
              max_attempts=10
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                set +e
                aws lambda get-alias \
                  --function-name "$func_name" \
                  --name latest \
                  --region "$AWS_REGION" > /dev/null 2>&1
                alias_exists=$?
                set -e
                
                if [ $alias_exists -eq 0 ]; then
                  echo "@@@@@@@@@@@@@@@@@@@@@@@@  Alias 'latest' is now active"
                  break
                fi
                
                attempt=$((attempt + 1))
                if [ $attempt -lt $max_attempts ]; then
                  echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for alias creation... (attempt $attempt/$max_attempts)"
                  sleep 2
                else
                  echo "@@@@@@@@@@@@@@@@@@@@@@@@  WARNING: Alias creation verification timed out"
                fi
              done
            else
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Alias 'latest' already exists (exit code: $ALIAS_CHECK_EXIT_CODE), updating to version $PUBLISHED_VERSION..."
              aws lambda update-alias \
                --function-name "$func_name" \
                --name latest \
                --function-version "$PUBLISHED_VERSION" \
                --region "$AWS_REGION"
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Updated alias 'latest' to point to version $PUBLISHED_VERSION"
              
              # Wait to ensure alias update is complete
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting for alias update to complete..."
              sleep 3
            fi
            
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Version management completed for $func_name"
            echo "@@@@@@@@@@@@@@@@@@@@@@@   Completed deployment for $func_name"
            
            # Update appspec.yml with version info for this specific function
            if [ "$NEW_VERSION" -gt 1 ]; then
              CURRENT_VERSION=$((PUBLISHED_VERSION - 1))
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Function: $func_name - Current Version: $CURRENT_VERSION, Published Version: $PUBLISHED_VERSION"
            else
              CURRENT_VERSION=$PUBLISHED_VERSION
              echo "@@@@@@@@@@@@@@@@@@@@@@@@  Function: $func_name - Initial deployment - Current Version: $CURRENT_VERSION, Published Version: $PUBLISHED_VERSION"
            fi
            
            # Use awk to find and replace versions for the specific function in appspec_working.yml
            echo "@@@@@@@@@@@@@@@@@@@@@@@@  Updating appspec_working.yml for function $func_name..."
            awk -v func="$func_name" -v current="$CURRENT_VERSION" -v target="$PUBLISHED_VERSION" '
            BEGIN { in_function = 0 }
            /^  - [a-z_]+:$/ { 
              # Match function name as a list item (e.g., "  - fetch_order:" or "  - save_order:")
              func_key = $2
              sub(/:$/, "", func_key)  # Remove trailing colon
              if (func_key == func) {
                in_function = 1
              } else {
                in_function = 0
              }
            }
            {
              if (in_function && /CurrentVersion:/) {
                sub(/"<CURRENT_VERSION>"/, "\"" current "\"")
              }
              if (in_function && /TargetVersion:/) {
                sub(/"<PUBLISHED_VERSION>"/, "\"" target "\"")
              }
              print
            }' appspec_working.yml > appspec_temp.yml && mv appspec_temp.yml appspec_working.yml
            
            echo "----------------------------------------"
          fi
        done
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@ Lambda function deployment completed .................."
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@ Final appspec.yml contents:"
      - mv appspec_working.yml appspec.yml
      - cat appspec.yml
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@  Waiting 5 minutes for AWS to propagate all changes..."
      - sleep 300
      - echo "@@@@@@@@@@@@@@@@@@@@@@@@  Wait complete. Ready for deployment."

artifacts:
  files:
    - "appspec.yml"
